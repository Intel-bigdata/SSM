/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.ssm.protocol;

option java_package = "org.apache.hadoop.smart.protocol";
option java_outer_classname = "ClientSmartProto";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

message GetServiceStateRequestProto {
}

message GetServiceStateResponseProto {
  required int32 state = 1;
}

enum RuleStateProto {
  ACTIVE = 0x0;
  DRYRUN = 0x1;
  DISABLED = 0x2;
  FINISHED = 0x3;
  DELETED = 0x4;
}

message RuleInfoProto {
  required sint64 id = 1;
  required sint64 submitTime = 2;
  required sint64 lastCheckTime = 3;
  required sint64 numChecked = 4;
  required sint64 numCmdsGen = 5;
  required string ruleText = 6;
  required RuleStateProto rulestateProto = 7;
}

message GetRuleInfoRequestProto {
  required sint64 ruleId = 1;
}

message GetRuleInfoResponseProto {
  required RuleInfoProto result = 1;
}

message SubmitRuleRequestProto {
  required string rule = 1;
  required RuleStateProto initState = 2;
}

message SubmitRuleResponseProto {
  required int64 ruleId = 1;
}

message CheckRuleRequestProto {
  required string rule = 1;
}

message CheckRuleResponseProto {
}

message ListRulesInfoRequestProto {
}

message ListRulesInfoResponseProto {
  repeated RuleInfoProto rulesInfo = 1;
}

message DeleteRuleRequestProto {
  required int64 ruleId = 1;
  required bool dropPendingCommands = 2;
}

message DeleteRuleResponseProto {
}

message ActivateRuleRequestProto {
  required int64 ruleId = 1;
}

message ActivateRuleResponseProto {
}

message DisableRuleRequestProto {
  required int64 ruleId = 1;
  required bool dropPendingCommands = 2;
}

message DisableRuleResponseProto {
}

service protoService {
  rpc getServiceState (GetServiceStateRequestProto)
    returns (GetServiceStateResponseProto);
  rpc submitRule (SubmitRuleRequestProto) returns (SubmitRuleResponseProto);
  rpc checkRule (CheckRuleRequestProto) returns (CheckRuleResponseProto);
  rpc getRuleInfo (GetRuleInfoRequestProto) returns (GetRuleInfoResponseProto);
  rpc listRulesInfo (ListRulesInfoRequestProto)
    returns (ListRulesInfoResponseProto);
  rpc deleteRule (DeleteRuleRequestProto) returns (DeleteRuleResponseProto);
  rpc activateRule (ActivateRuleRequestProto)
    returns (ActivateRuleResponseProto);
  rpc disableRule (DisableRuleRequestProto) returns (DisableRuleResponseProto);
}
