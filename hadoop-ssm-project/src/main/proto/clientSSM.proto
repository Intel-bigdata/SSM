/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.ssm.protocol;

option java_package = "org.apache.hadoop.ssm.protocol";
option java_outer_classname = "ClientSSMProto";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

message voidProto {
}

enum RuleStateProto {
  ACTIVE = 0x0;
  DRYRUN = 0x1;
  DISABLED = 0x2;
  FINISHED = 0x3;
}

message StatusResultProto {
  required string SSMServiceState = 1;
}

message submitRuleParaProto {
  required string rule = 1;
  required RuleStateProto initStateProto = 2;
}
message submitRuleResProto {
  required int64 result = 1;
}

message checkRuleParaProto {
  required string rule = 1;
}

message deleteRuleParaProto {
  required int64 ruleID = 1;
  required bool dropPendingCommands = 2;
}

message setRuleStateParaProto {
  required int64 ruleID = 1;
  required RuleStateProto newStateProto = 2;
  required bool dropPendingCommands = 3;
}

message RuleInfoParaProto {
  required int64 para = 1;
}
message RuleInfoResultProto {
  required int64 id = 1;
  required int64 submitTime = 2;
  required int64 countConditionChecked = 3;
  required int64 countConditionFulfilled = 4;
  required string ruleText = 5;
  required RuleStateProto rulestateProto = 6;
}

message AllRuleInfoResultProto {
  repeated RuleInfoResultProto result = 1;
}

service protoService {
  rpc getServiceStatus (voidProto) returns (StatusResultProto);
  rpc submitRule (submitRuleParaProto) returns (submitRuleResProto);
  rpc checkRule (checkRuleParaProto) returns (voidProto);
  rpc deleteRule (deleteRuleParaProto) returns (voidProto);
  rpc setRuleState (setRuleStateParaProto) returns (voidProto);
  rpc getRuleInfo (RuleInfoParaProto) returns (RuleInfoResultProto);
  rpc getAllRuleInfo (voidProto) returns (AllRuleInfoResultProto);
}
