/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.smartdata.protocol;

option java_package = "org.smartdata.protocol";
option java_outer_classname = "ClientServerProto";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

message ReportFileAccessEventRequestProto {
  required string filePath = 1;
  required int64 fileId = 2;
  required string accessedBy = 3;
}

message ReportFileAccessEventResponseProto {
}

message GetFileStateRequestProto {
  required string filePath = 1;
}

message CompressionFileStateProto {

}

message CompactFileStateProto {
  required string containerFilePath = 1;
  required int64 offset = 2;
  required int64 length = 3;
}

message S3FileStateProto {

}

message GetFileStateResponseProto {
  required string path = 1;
  required int32 type = 2;
  required int32 stage = 3;
  optional CompressionFileStateProto compressionFileState = 4;
  optional CompactFileStateProto compactFileState = 5;
  optional S3FileStateProto s3FileState = 6;
}

service protoService {
  rpc reportFileAccessEvent (ReportFileAccessEventRequestProto)
  returns (ReportFileAccessEventResponseProto);
  rpc getFileState (GetFileStateRequestProto)
  returns (GetFileStateResponseProto);
}